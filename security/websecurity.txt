Security Detials on your code
1. Your javascript can be read by anyone
2. Do not put database information in your javascript 

Cross Site Scripting Attacks
1. Attack pattern where malicious code get injected to URL or form input 
User can use the script tag <script>, or <img src="" onerror="alert('test')" > in url or form
/your/GET/url?params=<script>malicious code</script>" 
2. to prevent XSS. Use proper input validation and output sanitization

CSRF 
Session ID from server that is saved on a cookie on user's browser is then used or stolen by an attacker to create unauthorized request to the server. 
https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
- Check if your framework has built-in CSRF protection and use it
    - If framework does not have built-in CSRF protection add CSRF tokens to all state changing requests (requests that cause actions on the site) and validate them on backend
- For stateful software use the synchronizer token pattern
- For stateless software use double submit cookies
- Implement at least one mitigation from Defense in Depth Mitigations section
    - Consider SameSite Cookie Attribute for session cookies but be careful to NOT set a cookie specifically for a domain as that would introduce a security vulnerability that all subdomains of that domain share the cookie. This is particularly an issue when a subdomain has a CNAME to domains not in your control.
    - Consider implementing user interaction based protection for highly sensitive operations
    - Consider the use of custom request headers
    - Consider verifying the origin with standard headers
- Remember that any Cross-Site Scripting (XSS) can be used to defeat all CSRF mitigation techniques!

CORS 
- Browser builtin technology 
browser's same-origin policy blocks reading a resource from a different origin

- The HTTP header is used to negotiate the type of message exchange between the client and the server and is used to determine access
- A header can include a variety of information expressed as key-value pairs - https://www.geeksforgeeks.org/http-headers/

How to allow CORS -  https://web.dev/cross-origin-resource-sharing/
When you want to get a public resource from a different origin, the resource-providing server needs to tell the browser "This origin where the request is coming from can access my resource". The browser remembers that and allows cross-origin resource sharing.

Step 1: client (browser) request #
When the browser is making a cross-origin request, the browser adds an Origin header with the current origin (scheme, host, and port).

Step 2: server response #
On the server side, when a server sees this header, and wants to allow access, it needs to add an Access-Control-Allow-Origin header to the response specifying the requesting origin (or * to allow any origin.)

Step 3: browser receives response #
When the browser sees this response with an appropriate Access-Control-Allow-Origin header, the browser allows the response data to be shared with the client site.

Try the Command from Console: 
fetch('https://cors-demo.glitch.me/', {mode:'cors'}) - This get the CORS error because the server did not send the - access-control-allow-origin: *
fetch('https://cors-demo.glitch.me/allow-cors', {mode:'cors'}) - This request is successfule because it received from response header - access-control-allow-origin: * 
